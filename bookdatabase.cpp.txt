#include BookDatabase.hpp


   Include necessary header files.
  
   Do not put anything else in this section, i.e. comments, classes,
   functions, etc.  Only #include directives.

#include fstream
#include string


const stdstring kDatabaseFilename = database.txt;

 Return a reference to the one and only instance of the database
BookDatabase & BookDatabaseinstance() {
  static BookDatabase theInstance( kDatabaseFilename );
  return theInstance;
}

BookDatabaseBookDatabase( const stdstring & filename ) {
  stdifstream fin( filename, stdiosbinary );

   The file contains Books separated by whitespace. A Book has 4 pieces of
   data delimited with a comma. This exactly matches the previous assignment
   as to how Books are read.
  
         Field            Type            Notes
    1.   Book's ISBN      String          Unique identifier (primary key), always enclosed in double quotes
    2.   Book's Title     String          May contain spaces, always enclosed in double quotes
    3.   Book's Author    String          May contain spaces, always enclosed in double quotes
    4.   Book's Price     Floating Point  In dollars
  
    Example
      0001062417,  Early aircraft,                 Maurice F. Allward, 65.65
      0000255406,  Shadow maker 1st edition),  Rosemary Sullivan,   8.08
      0000385264,  Der Karawanenkardinal,          Heinz Gstrein,      35.18
  
   NOTE Double quotes within the string are escaped with the backslash
   character.
  


     HINT  Use your Book's extraction operator to read Books, don't reinvent
     that here. Read books until end of file, pushing each book into the data
     store as they are read.
  while(!fin.eof())
  {
    Book temp;
    fin  temp;
    books.push_back(temp);
  }


   NOTE The file is intentionally not explicitly closed. The file is closed
   when fin goes out of scope - for whatever reason. More precisely, the
   object `fin` is destroyed when it goes out of scope and the file is closed
   in the destructor. See RAII.
}


   Implement the rest of the interface, including functions find
   (recursively) and size.
  
   Programming note  An O(n) operation, like searching an unsorted vector,
   would not generally be implemented recursively. The depth of recursion
   may be greater than the program's function call stack size. But for this
   programming exercise, getting familiar with recursion is a goal.

Book  BookDatabasefind( const stdstring & isbn )
{
  static auto begin = books.begin();
  static auto end = books.end();
  if(begin == end)
  {
    begin = books.begin();
    end = books.end();
    return nullptr;
  }
  else
  {
    if(isbn == begin-isbn())
    {
      Book temp = &(begin);
      begin = books.begin();
      end = books.end();
      return temp;
    }
    else{
      begin++;
      return find(isbn);
    }
  }

}


stdsize_t BookDatabasesize() const
{
  return books.size();
}